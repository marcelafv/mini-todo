{"ast":null,"code":"var _jsxFileName = \"/home/marcela/Documents/mini-todo/src/App.js\";\nimport React from 'react';\nimport dateformat from 'dateformat';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport todo from \"./mockData.json\";\nimport Checkbox from './checkbox';\n\nfunction Header() {\n  const [filter, setFilter] = React.useState({\n    overdueOnly: false,\n    includeComplete: false\n  });\n  const [items, setItems] = React.useState(todo.Items);\n  return /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    className: \"navbar navbar-light bg-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"navbar-brand\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  }, \"Minimalist Todo List\")), /*#__PURE__*/React.createElement(Checkbox, {\n    label: \"Overdue items only\",\n    selected: filter.overdueOnly,\n    select: () => setFilter({ ...filter,\n      overdueOnly: true\n    }),\n    unSelect: () => setFilter({ ...filter,\n      overdueOnly: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    label: \"Include complete items\",\n    selected: filter.includeComplete,\n    select: () => setFilter({ ...filter,\n      includeComplete: true\n    }),\n    unSelect: () => setFilter({ ...filter,\n      includeComplete: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }));\n}\n\nfunction isOverdue(item) {\n  return !item.complete && item.timestampDeadline < new Date().getTime();\n}\n\nfunction completeItem(id) {\n  const updatedItems = todo.items.map(item => item.id === id ? { ...item,\n    complete: true\n  } : item);\n  setItems(updatedItems);\n}\n\nfunction List({\n  filter,\n  completeItem\n}) {\n  const filteredItems = todo.filter(item => (filter.includeComplete || !item.complete) && (!filter.overdueOnly || isOverdue(item)));\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, filteredItems.map(item => /*#__PURE__*/React.createElement(Item, {\n    key: item.id,\n    item: item,\n    completeItem: () => completeItem(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  })));\n}\n\nfunction Item({\n  item,\n  completeItem\n}) {\n  const itemClass = `list-group-item list-group-item-${isOverdue(item)}`;\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: itemClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `item-title${item.complete ? \" complete-item\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, `${item.name} - ${dateformat(new Date(item.timestampDeadline), \"dd-mm-yyyy\")}`), !item.complete && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-link\",\n    onClick: completeItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, \"Complete item\")));\n}\n\nexport default Header;","map":{"version":3,"sources":["/home/marcela/Documents/mini-todo/src/App.js"],"names":["React","dateformat","todo","Checkbox","Header","filter","setFilter","useState","overdueOnly","includeComplete","items","setItems","Items","isOverdue","item","complete","timestampDeadline","Date","getTime","completeItem","id","updatedItems","map","List","filteredItems","Item","itemClass","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dateformat from 'dateformat';\nimport logo from './logo.svg';\nimport './App.css';\nimport todo from \"./mockData.json\"\nimport Checkbox from './checkbox'\n\n\nfunction Header() {\n    const [filter, setFilter] = \n        React.useState({ overdueOnly: false, includeComplete: false });\n    const [items, setItems] = React.useState(todo.Items)\n    return (\n        <header>\n            <nav className=\"navbar navbar-light bg-light\">\n                <span className=\"navbar-brand\">\n                    Minimalist Todo List\n                </span>\n            </nav>\n        <Checkbox\n            label=\"Overdue items only\" selected={filter.overdueOnly}\n            select={() => setFilter({...filter, overdueOnly: true})}\n            unSelect={() => setFilter({...filter, overdueOnly: false})}\n        />\n        <Checkbox\n            label=\"Include complete items\" selected={filter.includeComplete}\n            select={() => setFilter({...filter, includeComplete: true})}\n            unSelect={() => setFilter({...filter, includeComplete: false})}\n        />\n        </header>\n    );\n        \n}\n\nfunction isOverdue(item) {\n    return !item.complete && item.timestampDeadline < new Date().getTime();\n}\n\nfunction completeItem(id) {\n    const updatedItems = todo.items.map(item => (item.id === id ? { ...item, complete: true } : item ));\n    setItems(updatedItems)\n}\n\nfunction List({filter, completeItem}) {\n    const filteredItems = todo.filter(item => \n        (filter.includeComplete || !item.complete) &&\n        (!filter.overdueOnly || isOverdue(item)),\n    );\n    \n    return (\n        <ul className=\"list-group\">\n            {filteredItems.map(item => (\n                <Item key={item.id} item={item} completeItem={() => completeItem(item.id)} />))}\n        </ul>\n    );\n}\n\n\nfunction Item({ item, completeItem  }) {\n    const itemClass = `list-group-item list-group-item-${isOverdue(item)}`\n    return (\n        <li className={itemClass}>\n            <div className=\"item\">\n                <span className={`item-title${item.complete ? \" complete-item\" : \"\"}`}>\n                    {`${item.name} - ${dateformat(new Date(item.timestampDeadline), \"dd-mm-yyyy\")}`}\n                </span>\n                {!item.complete && (\n                    <button type=\"button\" className=\"btn btn-link\" onClick={completeItem}>\n                        Complete item\n                    </button>)}\n            </div>\n        </li>);\n}\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}